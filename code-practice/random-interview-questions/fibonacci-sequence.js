// Create a fibonacci sequence using iterations
// Overall faster since the complexity of data isn't too big

function fib (n) {
  // created an arr for the first two number in the fibonacci sequence since it cannot be effectively generated by a for loop
  const arr = [0, 1]
  // create a loop that starts iterating from i = 2 and adds numbers to the array until the length of the array is equal to n + 1
  for (let i = 2; i < n + 1; i++) {
    arr.push(arr[i - 2] + arr[i - 1])
  }
  // return number at n index of the array
  return arr[n]
}

console.log(fib(4))
console.log(fib(8))

// recursive solution
// slower and takes more memory in this case since data set isnt too large

// fib function will continue to recursively call itself creating more and more branches of the tree until it hits the base case,
// from which it will start summing up each branchâ€™s return values bottom up, until it finally sums them all up
// and returns an integer equal to n

function fibon (n) {
  if (n < 2) {
    return n
  }
  return fibon(n - 1) + fibon(n - 2)
}

console.log(fibon(4))
console.log(fibon(8))
